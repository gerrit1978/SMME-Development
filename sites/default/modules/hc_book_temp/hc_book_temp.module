<?php

/**
 * @file
 * This module provides a temporary booking form
 *
 * PLEASE NOTE THIS PATCH WAS APPLIED TO THE WEBFORM MODULE: http://drupal.org/files/webform-add_custom_classes_to_components-536236.patch
 */

/**
 * Implements hook_init
 */
function hc_book_temp_init() {
  $path = drupal_get_path('module', 'hc_book_temp');
  drupal_add_css($path . '/hc_book_temp.css');
  drupal_add_js($path . '/hc_book_temp.js');
}


/**
 * Implements hook_menu
 */
function hc_book_temp_menu() {
  $items = array();
  
  $items['book-this-course'] = array(
    'title' => 'Book This Course',
    'page callback' => '_hc_book_temp_render_form',
    'access arguments' => array('access content'),
  );
  
  return $items;
}



/**
 * Helper function for rendering booking form
 */
function _hc_book_temp_render_form() {

  // define which form to be shown
  $current_location = $_SESSION['user_location']['continent_code'];
  
  $block = array('content' => '');
  
/*
  switch ($current_location) {
    case 'NA':
    default:
      $block = module_invoke('webform', 'block_view', 'client-block-53');
      break;
    case 'EU':
      $block = module_invoke('webform', 'block_view', 'client-block-54');
      break;
    case 'AS':
      $block = module_invoke('webform', 'block_view', 'client-block-55');
      break;
  }
*/

  // currently: just one simple form for the three regions, see mail Jace 13/04/2013 - 01:15
  $block = module_invoke('webform', 'block_view', 'client-block-67');
  
  $output = $block['content'];
  
  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter: simple booking form
 *
 * Three possibilities:
 *
 * 1. only $_GET['nid'] is set: from the "book a course" page, "choose your own date" is chosen
 * 2. $_GET['nid']Â and $_GET['pid'] are set: from the "book a course" page, a specific date is chosen
 * 3. only $_GET['pid'] is set: from the course detail page, a specific date is chosen
 */
function hc_book_temp_form_webform_client_form_67_alter(&$form, &$form_state) {

  // add redirect to current page
  $redirect = $_GET['redirect'];
  $form['#node']->webform['redirect_url'] = $redirect;

  // COURSE TITLE AND NID
  $course_nid = 0;
  $course_title = "";

  if (isset($_GET['nid'])) {
    $course_nid = $_GET['nid'];
    $course_node = node_load($course_nid);
    $course_title = $course_node->title;
  } else {
    if (isset($_GET['pid'])) {
	    $result = db_query("SELECT entity_id FROM {field_data_field_course_public_courses} WHERE field_course_public_courses_target_id=:pid;", array(':pid' => $_GET['pid']));
	    foreach ($result as $row) {
	      $course_nid = $row->entity_id;
	      $course_node = node_load($course_nid);
		    $course_title = $course_node->title;
		  }  
    }
  }
  
  $form['submitted']['title_markup']['#markup'] = $course_title;

  // SESSION POSSIBILITIES: Check for variations
  /*
   * 1. There are variations
   * - store them in the option array
   * - add option "Choose your own"
   * 1a. pid is set
   * --- make that option default
   * 1b. pid is not set
   * --- no default value
   * 2. There are no variations
   * - just add option "choose your own"
   */
  if ($course_nid > 0) {
    $variations = field_get_items('node', $course_node, 'field_course_public_courses');
    $options = array();
    if (count($variations)) {
      foreach ($variations as $variation) {
        if (isset($variation['target_id'])) {
          $commerce_product_wrapper = entity_metadata_wrapper('commerce_product', $variation['target_id']);
          
          // location
          $commerce_product_location = $commerce_product_wrapper->field_public_course_location->value();
          
          // price
          $commerce_product_price = $commerce_product_wrapper->commerce_price->value();
          $commerce_product_price_amount = intval($commerce_product_price['amount']);
          $commerce_product_price_formatted = commerce_currency_format($commerce_product_price_amount, $commerce_product_price['currency_code']);

          // date
          $commerce_product_dates = $commerce_product_wrapper->field_public_course_date_format->value();
          
          // compose the option
          $option = $commerce_product_location . " - " . $commerce_product_price_formatted . " - " . $commerce_product_dates;
          $options[$option] = $option;
          
          // check if this variation was already chosen
          if (isset($_GET['pid']) && $_GET['pid'] == $variation['target_id']) {
            $default_option = $option;
          }
        }

      }
    }
    // now add the "Choose Your Own Dates" option
    $options['choose_your_own_dates'] = t('Choose Your Own Dates');

    // set these options to the form select
    $form['submitted']['session']['#options'] = $options;

    // if necessary, set default option (session location-date-price)
    if (isset($default_option)) {
      $form['submitted']['session']['#default_value'] = $default_option;
      
      // make the "coupon_code_markup" and "coupon_code" component visible
      $form['submitted']['right']['coupon_code_markup']['#webform_component']['extra']['wrapper_classes'] = "";
      $form['submitted']['right']['coupon_code']['#webform_component']['extra']['wrapper_classes'] = "";      
      
    } else {
      $form['submitted']['session']['#default_value'] = "choose_your_own_dates";
      
      // make the "contact_markup" component visible
      $form['submitted']['right']['contact_markup']['#webform_component']['extra']['wrapper_classes'] = "";      
    }
    
  }
}


/**
 * Implements hook_form_FORM_ID_alter: USA booking form
 */
function hc_book_temp_form_webform_client_form_53_alter(&$form, &$form_state) {

  // add redirect to current page
  $redirect = $_GET['redirect'];

  $form['submitted']['intro']['#markup'] = "";
  $form['#node']->webform['redirect_url'] = $redirect;

/*
  // add ajax callback and submit functions
  $form['actions']['submit']['#ajax'] = array(
    'callback' => 'hc_book_temp_ajax_callback',
    'wrapper' => str_replace('_', '-', $form['#form_id']),
  );

  $form['#submit'][] = 'hc_book_temp_ajax_form_submit_redirect';
  $form['#validate'][] = 'hc_book_temp_ajax_form_validate';
*/

  if (isset($_GET['nid'])) {
    $node = node_load($_GET['nid']);
    $course_title = $node->title;
    $form['submitted']['title']['#markup'] = t('Book the "@title" course', array('@title' => $course_title));
    $form['submitted']['left']['course_title']['#default_value'] = $course_title;
  }
  
  if (isset($_GET['pid'])) {

    if (isset($_GET['nid'])) {
      $course_nid = $_GET['nid'];
    } else {
      $result = db_query("SELECT entity_id FROM {field_data_field_course_public_courses} WHERE field_course_public_courses_target_id=:pid;", array(':pid' => $_GET['pid']));
      foreach ($result as $row) {
        $course_nid = $row->entity_id;
        $node = node_load($course_nid);
		    $course_title = $node->title;
		    $form['submitted']['title']['#markup'] = t('Book the "@title" course', array('@title' => $course_title));
		    $form['submitted']['left']['course_title']['#default_value'] = $course_title;
      }
    }


    $form['submitted']['left']['your_own_date']['#prefix'] = "<div id='choose-date-wrapper' style='display: none;'>";
    $form['submitted']['left']['your_own_date']['#suffix'] = "</div>";

    $date_options = array();
    $course_wrapper = entity_metadata_wrapper('node', $course_nid);
    $variations = $course_wrapper->field_course_public_courses->value();
    if (is_array($variations) && count($variations) > 0) {
      foreach ($variations as $variation) {
        $date_format = $variation->field_public_course_date_format['und'][0]['safe_value'];
        $date_options[$date_format] = $date_format;
      }
      $date_options['other'] = t('Choose Your Own');
      
      // get default value
      $selected_variation_wrapper = entity_metadata_wrapper('commerce_product', $_GET['pid']);
      $selected_date = $selected_variation_wrapper->field_public_course_date_format->value();
      
      $form['submitted']['left']['session']['#type'] = 'select';
      $form['submitted']['left']['session']['#options'] = $date_options;
      $form['submitted']['left']['session']['#default_value'] = $selected_date;
    } else {
      unset($form['submitted']['left']['session']);
      $form['submitted']['left']['session'] = array();
    }
  }
  
  if (isset($_GET['nid']) && isset($_GET['onsite'])) {
    unset($form['submitted']['left']['session']);
  }
  
  if (isset($_GET['nid']) && !isset($_GET['onsite'])) {
    $course_wrapper = entity_metadata_wrapper('node', $_GET['nid']);
    $variations = $course_wrapper->field_course_public_courses->value();
    if (is_array($variations) && count($variations) > 0) {
      foreach ($variations as $variation) {
        $date_format = $variation->field_public_course_date_format['und'][0]['safe_value'];
        $date_options[$date_format] = $date_format;
      }
      $date_options['other'] = t('Choose Your Own');
      
      $form['submitted']['left']['session']['#type'] = 'select';
      $form['submitted']['left']['session']['#options'] = $date_options;
      $form['submitted']['left']['your_own_date']['#prefix'] = "<div id='choose-date-wrapper' style='display: none;'>";
      $form['submitted']['left']['your_own_date']['#suffix'] = "</div>";
      
    } else {
      unset($form['submitted']['left']['session']);
      $form['submitted']['left']['session'] = array();
    }
  
  }

}

/**
 * Implements hook_form_FORM_ID_alter: EU booking form
 */
function hc_book_temp_form_webform_client_form_54_alter(&$form, &$form_state) {

  // add redirect to current page
  $redirect = $_GET['redirect'];

  $form['submitted']['intro']['#markup'] = "";
  $form['#node']->webform['redirect_url'] = $redirect;

/*
  // add ajax callback and submit functions
  $form['actions']['submit']['#ajax'] = array(
    'callback' => 'hc_book_temp_ajax_callback',
    'wrapper' => str_replace('_', '-', $form['#form_id']),
  );

  $form['#submit'][] = 'hc_book_temp_ajax_form_submit_redirect';
  $form['#validate'][] = 'hc_book_temp_ajax_form_validate';
*/

  if (isset($_GET['nid'])) {
    $node = node_load($_GET['nid']);
    $course_title = $node->title;
    $form['submitted']['title']['#markup'] = t('Book the "@title" course', array('@title' => $course_title));
    $form['submitted']['left']['course_title']['#default_value'] = $course_title;
  }
  
  if (isset($_GET['pid'])) {

    if (isset($_GET['nid'])) {
      $course_nid = $_GET['nid'];
    } else {
      $result = db_query("SELECT entity_id FROM {field_data_field_course_public_courses} WHERE field_course_public_courses_target_id=:pid;", array(':pid' => $_GET['pid']));
      foreach ($result as $row) {
        $course_nid = $row->entity_id;
        $node = node_load($course_nid);
		    $course_title = $node->title;
		    $form['submitted']['title']['#markup'] = t('Book the "@title" course', array('@title' => $course_title));
		    $form['submitted']['left']['course_title']['#default_value'] = $course_title;
      }
    }


    $form['submitted']['left']['your_own_date']['#prefix'] = "<div id='choose-date-wrapper' style='display: none;'>";
    $form['submitted']['left']['your_own_date']['#suffix'] = "</div>";

    $date_options = array();
    $course_wrapper = entity_metadata_wrapper('node', $course_nid);
    $variations = $course_wrapper->field_course_public_courses->value();
    if (is_array($variations) && count($variations) > 0) {
      foreach ($variations as $variation) {
        $date_format = $variation->field_public_course_date_format['und'][0]['safe_value'];
        $date_options[$date_format] = $date_format;
      }
      $date_options['other'] = t('Choose Own Date');
      
      // get default value
      $selected_variation_wrapper = entity_metadata_wrapper('commerce_product', $_GET['pid']);
      $selected_date = $selected_variation_wrapper->field_public_course_date_format->value();
      
      $form['submitted']['left']['session']['#type'] = 'select';
      $form['submitted']['left']['session']['#options'] = $date_options;
      $form['submitted']['left']['session']['#default_value'] = $selected_date;
    } else {
      unset($form['submitted']['left']['session']);
      $form['submitted']['left']['session'] = array();
    }
  }
  
  if (isset($_GET['nid']) && isset($_GET['onsite'])) {
    unset($form['submitted']['left']['session']);
  }
  
  if (isset($_GET['nid']) && !isset($_GET['onsite'])) {
    $course_wrapper = entity_metadata_wrapper('node', $_GET['nid']);
    $variations = $course_wrapper->field_course_public_courses->value();
    if (is_array($variations) && count($variations) > 0) {
      foreach ($variations as $variation) {
        $date_format = $variation->field_public_course_date_format['und'][0]['safe_value'];
        $date_options[$date_format] = $date_format;
      }
      $date_options['other'] = t('Choose Own Date');
      
      $form['submitted']['left']['session']['#type'] = 'select';
      $form['submitted']['left']['session']['#options'] = $date_options;
      $form['submitted']['left']['your_own_date']['#prefix'] = "<div id='choose-date-wrapper' style='display: none;'>";
      $form['submitted']['left']['your_own_date']['#suffix'] = "</div>";
      
    } else {
      unset($form['submitted']['left']['session']);
      $form['submitted']['left']['session'] = array();
    }
  
  }

}


/**
 * Implements hook_form_FORM_ID_alter: AS booking form
 */
function hc_book_temp_form_webform_client_form_55_alter(&$form, &$form_state) {

  if (isset($_GET['nid'])) {
    $node = node_load($_GET['nid']);
    $course_title = $node->title;
    $form['submitted']['course_title']['#default_value'] = $course_title;
  }

}





/**
 * Implements hook_form_alter
*/
function hc_book_temp_form_alter(&$form, &$form_state, $form_id) {

}



/**
 * AJAX callback function
 */
function hc_book_temp_ajax_callback(&$form, &$form_state) {
  return $form;
}


/**
 * Custom submit function
 */
function hc_book_temp_ajax_form_submit_redirect(&$form, &$form_state) {
//  exit('Custom submit function aangeroepen');
}

/**
 * Custom validation function
 */
function hc_book_temp_ajax_form_validate(&$form, &$form_state) {
//  exit('custom validation function aangeroepen');
}